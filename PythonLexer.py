# Generated from Python.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\60")
        buf.write("\u0143\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n")
        buf.write("\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3")
        buf.write("$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\5\'\u00f1")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u00fc\n(\3)\6)\u00ff")
        buf.write("\n)\r)\16)\u0100\3)\7)\u0104\n)\f)\16)\u0107\13)\3*\6")
        buf.write("*\u010a\n*\r*\16*\u010b\3*\3*\6*\u0110\n*\r*\16*\u0111")
        buf.write("\5*\u0114\n*\3+\3+\7+\u0118\n+\f+\16+\u011b\13+\3+\3+")
        buf.write("\3,\6,\u0120\n,\r,\16,\u0121\3,\3,\3-\3-\3-\3-\7-\u012a")
        buf.write("\n-\f-\16-\u012d\13-\3-\3-\3-\3-\3.\6.\u0134\n.\r.\16")
        buf.write(".\u0135\3/\6/\u0139\n/\r/\16/\u013a\3/\3/\7/\u013f\n/")
        buf.write("\f/\16/\u0142\13/\4\u0119\u012b\2\60\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60\3")
        buf.write("\2\6\4\2C\\c|\5\2\62;C\\c|\3\2\62;\5\2\13\f\17\17\"\"")
        buf.write("\2\u014f\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2")
        buf.write("\2\2\2]\3\2\2\2\3_\3\2\2\2\5a\3\2\2\2\7e\3\2\2\2\tk\3")
        buf.write("\2\2\2\13s\3\2\2\2\rz\3\2\2\2\17|\3\2\2\2\21~\3\2\2\2")
        buf.write("\23\u0083\3\2\2\2\25\u0087\3\2\2\2\27\u0089\3\2\2\2\31")
        buf.write("\u008b\3\2\2\2\33\u008d\3\2\2\2\35\u008f\3\2\2\2\37\u0094")
        buf.write("\3\2\2\2!\u009b\3\2\2\2#\u00a1\3\2\2\2%\u00a5\3\2\2\2")
        buf.write("\'\u00a8\3\2\2\2)\u00ae\3\2\2\2+\u00b4\3\2\2\2-\u00ba")
        buf.write("\3\2\2\2/\u00c0\3\2\2\2\61\u00c3\3\2\2\2\63\u00c8\3\2")
        buf.write("\2\2\65\u00ca\3\2\2\2\67\u00cc\3\2\2\29\u00d0\3\2\2\2")
        buf.write(";\u00d2\3\2\2\2=\u00d4\3\2\2\2?\u00d6\3\2\2\2A\u00d8\3")
        buf.write("\2\2\2C\u00db\3\2\2\2E\u00de\3\2\2\2G\u00e1\3\2\2\2I\u00e4")
        buf.write("\3\2\2\2K\u00e8\3\2\2\2M\u00f0\3\2\2\2O\u00fb\3\2\2\2")
        buf.write("Q\u00fe\3\2\2\2S\u0109\3\2\2\2U\u0115\3\2\2\2W\u011f\3")
        buf.write("\2\2\2Y\u0125\3\2\2\2[\u0133\3\2\2\2]\u0138\3\2\2\2_`")
        buf.write("\7=\2\2`\4\3\2\2\2ab\7k\2\2bc\7p\2\2cd\7v\2\2d\6\3\2\2")
        buf.write("\2ef\7h\2\2fg\7n\2\2gh\7q\2\2hi\7c\2\2ij\7v\2\2j\b\3\2")
        buf.write("\2\2kl\7d\2\2lm\7q\2\2mn\7q\2\2no\7n\2\2op\7g\2\2pq\7")
        buf.write("c\2\2qr\7p\2\2r\n\3\2\2\2st\7u\2\2tu\7v\2\2uv\7t\2\2v")
        buf.write("w\7k\2\2wx\7p\2\2xy\7i\2\2y\f\3\2\2\2z{\7.\2\2{\16\3\2")
        buf.write("\2\2|}\7?\2\2}\20\3\2\2\2~\177\7x\2\2\177\u0080\7q\2\2")
        buf.write("\u0080\u0081\7k\2\2\u0081\u0082\7f\2\2\u0082\22\3\2\2")
        buf.write("\2\u0083\u0084\7f\2\2\u0084\u0085\7g\2\2\u0085\u0086\7")
        buf.write("h\2\2\u0086\24\3\2\2\2\u0087\u0088\7*\2\2\u0088\26\3\2")
        buf.write("\2\2\u0089\u008a\7+\2\2\u008a\30\3\2\2\2\u008b\u008c\7")
        buf.write("<\2\2\u008c\32\3\2\2\2\u008d\u008e\7\177\2\2\u008e\34")
        buf.write("\3\2\2\2\u008f\u0090\7o\2\2\u0090\u0091\7c\2\2\u0091\u0092")
        buf.write("\7k\2\2\u0092\u0093\7p\2\2\u0093\36\3\2\2\2\u0094\u0095")
        buf.write("\7t\2\2\u0095\u0096\7g\2\2\u0096\u0097\7v\2\2\u0097\u0098")
        buf.write("\7w\2\2\u0098\u0099\7t\2\2\u0099\u009a\7p\2\2\u009a \3")
        buf.write("\2\2\2\u009b\u009c\7d\2\2\u009c\u009d\7t\2\2\u009d\u009e")
        buf.write("\7g\2\2\u009e\u009f\7c\2\2\u009f\u00a0\7m\2\2\u00a0\"")
        buf.write("\3\2\2\2\u00a1\u00a2\7h\2\2\u00a2\u00a3\7q\2\2\u00a3\u00a4")
        buf.write("\7t\2\2\u00a4$\3\2\2\2\u00a5\u00a6\7k\2\2\u00a6\u00a7")
        buf.write("\7p\2\2\u00a7&\3\2\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa")
        buf.write("\7c\2\2\u00aa\u00ab\7p\2\2\u00ab\u00ac\7i\2\2\u00ac\u00ad")
        buf.write("\7g\2\2\u00ad(\3\2\2\2\u00ae\u00af\7y\2\2\u00af\u00b0")
        buf.write("\7j\2\2\u00b0\u00b1\7k\2\2\u00b1\u00b2\7n\2\2\u00b2\u00b3")
        buf.write("\7g\2\2\u00b3*\3\2\2\2\u00b4\u00b5\7r\2\2\u00b5\u00b6")
        buf.write("\7t\2\2\u00b6\u00b7\7k\2\2\u00b7\u00b8\7p\2\2\u00b8\u00b9")
        buf.write("\7v\2\2\u00b9,\3\2\2\2\u00ba\u00bb\7k\2\2\u00bb\u00bc")
        buf.write("\7p\2\2\u00bc\u00bd\7r\2\2\u00bd\u00be\7w\2\2\u00be\u00bf")
        buf.write("\7v\2\2\u00bf.\3\2\2\2\u00c0\u00c1\7k\2\2\u00c1\u00c2")
        buf.write("\7h\2\2\u00c2\60\3\2\2\2\u00c3\u00c4\7g\2\2\u00c4\u00c5")
        buf.write("\7n\2\2\u00c5\u00c6\7u\2\2\u00c6\u00c7\7g\2\2\u00c7\62")
        buf.write("\3\2\2\2\u00c8\u00c9\7/\2\2\u00c9\64\3\2\2\2\u00ca\u00cb")
        buf.write("\7-\2\2\u00cb\66\3\2\2\2\u00cc\u00cd\7p\2\2\u00cd\u00ce")
        buf.write("\7q\2\2\u00ce\u00cf\7v\2\2\u00cf8\3\2\2\2\u00d0\u00d1")
        buf.write("\7,\2\2\u00d1:\3\2\2\2\u00d2\u00d3\7\61\2\2\u00d3<\3\2")
        buf.write("\2\2\u00d4\u00d5\7@\2\2\u00d5>\3\2\2\2\u00d6\u00d7\7>")
        buf.write("\2\2\u00d7@\3\2\2\2\u00d8\u00d9\7@\2\2\u00d9\u00da\7?")
        buf.write("\2\2\u00daB\3\2\2\2\u00db\u00dc\7>\2\2\u00dc\u00dd\7?")
        buf.write("\2\2\u00ddD\3\2\2\2\u00de\u00df\7?\2\2\u00df\u00e0\7?")
        buf.write("\2\2\u00e0F\3\2\2\2\u00e1\u00e2\7#\2\2\u00e2\u00e3\7?")
        buf.write("\2\2\u00e3H\3\2\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6\7p")
        buf.write("\2\2\u00e6\u00e7\7f\2\2\u00e7J\3\2\2\2\u00e8\u00e9\7q")
        buf.write("\2\2\u00e9\u00ea\7t\2\2\u00eaL\3\2\2\2\u00eb\u00f1\5S")
        buf.write("*\2\u00ec\u00ed\5S*\2\u00ed\u00ee\7.\2\2\u00ee\u00ef\5")
        buf.write("S*\2\u00ef\u00f1\3\2\2\2\u00f0\u00eb\3\2\2\2\u00f0\u00ec")
        buf.write("\3\2\2\2\u00f1N\3\2\2\2\u00f2\u00f3\7V\2\2\u00f3\u00f4")
        buf.write("\7t\2\2\u00f4\u00f5\7w\2\2\u00f5\u00fc\7g\2\2\u00f6\u00f7")
        buf.write("\7H\2\2\u00f7\u00f8\7c\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa")
        buf.write("\7u\2\2\u00fa\u00fc\7g\2\2\u00fb\u00f2\3\2\2\2\u00fb\u00f6")
        buf.write("\3\2\2\2\u00fcP\3\2\2\2\u00fd\u00ff\t\2\2\2\u00fe\u00fd")
        buf.write("\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u00fe\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u0105\3\2\2\2\u0102\u0104\t\3\2\2")
        buf.write("\u0103\u0102\3\2\2\2\u0104\u0107\3\2\2\2\u0105\u0103\3")
        buf.write("\2\2\2\u0105\u0106\3\2\2\2\u0106R\3\2\2\2\u0107\u0105")
        buf.write("\3\2\2\2\u0108\u010a\t\4\2\2\u0109\u0108\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010c\u0113\3\2\2\2\u010d\u010f\7\60\2\2\u010e\u0110")
        buf.write("\t\4\2\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2")
        buf.write("\u0113\u010d\3\2\2\2\u0113\u0114\3\2\2\2\u0114T\3\2\2")
        buf.write("\2\u0115\u0119\7$\2\2\u0116\u0118\13\2\2\2\u0117\u0116")
        buf.write("\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u011a\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u011a\u011c\3\2\2\2\u011b\u0119\3\2\2\2")
        buf.write("\u011c\u011d\7$\2\2\u011dV\3\2\2\2\u011e\u0120\t\5\2\2")
        buf.write("\u011f\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u011f\3")
        buf.write("\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0124")
        buf.write("\b,\2\2\u0124X\3\2\2\2\u0125\u0126\7\61\2\2\u0126\u0127")
        buf.write("\7\61\2\2\u0127\u012b\3\2\2\2\u0128\u012a\13\2\2\2\u0129")
        buf.write("\u0128\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012b\u0129\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u012b\3")
        buf.write("\2\2\2\u012e\u012f\7\f\2\2\u012f\u0130\3\2\2\2\u0130\u0131")
        buf.write("\b-\2\2\u0131Z\3\2\2\2\u0132\u0134\t\4\2\2\u0133\u0132")
        buf.write("\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0133\3\2\2\2\u0135")
        buf.write("\u0136\3\2\2\2\u0136\\\3\2\2\2\u0137\u0139\t\4\2\2\u0138")
        buf.write("\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u0138\3\2\2\2")
        buf.write("\u013a\u013b\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u0140\7")
        buf.write("\60\2\2\u013d\u013f\t\4\2\2\u013e\u013d\3\2\2\2\u013f")
        buf.write("\u0142\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2")
        buf.write("\u0141^\3\2\2\2\u0142\u0140\3\2\2\2\20\2\u00f0\u00fb\u0100")
        buf.write("\u0105\u010b\u0111\u0113\u0119\u0121\u012b\u0135\u013a")
        buf.write("\u0140\3\b\2\2")
        return buf.getvalue()


class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    Range = 38
    BOOL = 39
    ID = 40
    NUM = 41
    STRING = 42
    WS = 43
    SL_COMMENT = 44
    INT = 45
    FLOAT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'int'", "'float'", "'boolean'", "'string'", "','", "'='", 
            "'void'", "'def'", "'('", "')'", "':'", "'}'", "'main'", "'return'", 
            "'break'", "'for'", "'in'", "'range'", "'while'", "'print'", 
            "'input'", "'if'", "'else'", "'-'", "'+'", "'not'", "'*'", "'/'", 
            "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "Range", "BOOL", "ID", "NUM", "STRING", "WS", "SL_COMMENT", 
            "INT", "FLOAT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "Range", 
                  "BOOL", "ID", "NUM", "STRING", "WS", "SL_COMMENT", "INT", 
                  "FLOAT" ]

    grammarFileName = "Python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


