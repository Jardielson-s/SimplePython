# Generated from Python.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2*")
        buf.write("\u0108\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t")
        buf.write("\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3")
        buf.write("$\3$\3%\6%\u00d5\n%\r%\16%\u00d6\3%\7%\u00da\n%\f%\16")
        buf.write("%\u00dd\13%\3&\6&\u00e0\n&\r&\16&\u00e1\3&\3&\6&\u00e6")
        buf.write("\n&\r&\16&\u00e7\5&\u00ea\n&\3\'\3\'\7\'\u00ee\n\'\f\'")
        buf.write("\16\'\u00f1\13\'\3\'\3\'\3(\6(\u00f6\n(\r(\16(\u00f7\3")
        buf.write("(\3(\3)\3)\3)\3)\7)\u0100\n)\f)\16)\u0103\13)\3)\3)\3")
        buf.write(")\3)\4\u00ef\u0101\2*\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21")
        buf.write("\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24")
        buf.write("\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37")
        buf.write("= ?!A\"C#E$G%I&K\'M(O)Q*\3\2\6\4\2C\\c|\5\2\62;C\\c|\3")
        buf.write("\2\62;\5\2\13\f\17\17\"\"\2\u010f\2\3\3\2\2\2\2\5\3\2")
        buf.write("\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2")
        buf.write("\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2")
        buf.write("\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37")
        buf.write("\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2")
        buf.write("\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2")
        buf.write("\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2")
        buf.write("\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2")
        buf.write("\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2")
        buf.write("\2\2\2O\3\2\2\2\2Q\3\2\2\2\3S\3\2\2\2\5U\3\2\2\2\7Y\3")
        buf.write("\2\2\2\t_\3\2\2\2\13g\3\2\2\2\rn\3\2\2\2\17p\3\2\2\2\21")
        buf.write("r\3\2\2\2\23v\3\2\2\2\25x\3\2\2\2\27z\3\2\2\2\31|\3\2")
        buf.write("\2\2\33~\3\2\2\2\35\u0083\3\2\2\2\37\u0089\3\2\2\2!\u008d")
        buf.write("\3\2\2\2#\u0090\3\2\2\2%\u0096\3\2\2\2\'\u009c\3\2\2\2")
        buf.write(")\u009f\3\2\2\2+\u00a4\3\2\2\2-\u00aa\3\2\2\2/\u00b0\3")
        buf.write("\2\2\2\61\u00b4\3\2\2\2\63\u00b6\3\2\2\2\65\u00ba\3\2")
        buf.write("\2\2\67\u00bd\3\2\2\29\u00bf\3\2\2\2;\u00c1\3\2\2\2=\u00c3")
        buf.write("\3\2\2\2?\u00c6\3\2\2\2A\u00c9\3\2\2\2C\u00cc\3\2\2\2")
        buf.write("E\u00cf\3\2\2\2G\u00d1\3\2\2\2I\u00d4\3\2\2\2K\u00df\3")
        buf.write("\2\2\2M\u00eb\3\2\2\2O\u00f5\3\2\2\2Q\u00fb\3\2\2\2ST")
        buf.write("\7=\2\2T\4\3\2\2\2UV\7k\2\2VW\7p\2\2WX\7v\2\2X\6\3\2\2")
        buf.write("\2YZ\7h\2\2Z[\7n\2\2[\\\7q\2\2\\]\7c\2\2]^\7v\2\2^\b\3")
        buf.write("\2\2\2_`\7d\2\2`a\7q\2\2ab\7q\2\2bc\7n\2\2cd\7g\2\2de")
        buf.write("\7c\2\2ef\7p\2\2f\n\3\2\2\2gh\7u\2\2hi\7v\2\2ij\7t\2\2")
        buf.write("jk\7k\2\2kl\7p\2\2lm\7i\2\2m\f\3\2\2\2no\7.\2\2o\16\3")
        buf.write("\2\2\2pq\7?\2\2q\20\3\2\2\2rs\7f\2\2st\7g\2\2tu\7h\2\2")
        buf.write("u\22\3\2\2\2vw\7*\2\2w\24\3\2\2\2xy\7+\2\2y\26\3\2\2\2")
        buf.write("z{\7<\2\2{\30\3\2\2\2|}\7\177\2\2}\32\3\2\2\2~\177\7o")
        buf.write("\2\2\177\u0080\7c\2\2\u0080\u0081\7k\2\2\u0081\u0082\7")
        buf.write("p\2\2\u0082\34\3\2\2\2\u0083\u0084\7d\2\2\u0084\u0085")
        buf.write("\7t\2\2\u0085\u0086\7g\2\2\u0086\u0087\7c\2\2\u0087\u0088")
        buf.write("\7m\2\2\u0088\36\3\2\2\2\u0089\u008a\7h\2\2\u008a\u008b")
        buf.write("\7q\2\2\u008b\u008c\7t\2\2\u008c \3\2\2\2\u008d\u008e")
        buf.write("\7k\2\2\u008e\u008f\7p\2\2\u008f\"\3\2\2\2\u0090\u0091")
        buf.write("\7t\2\2\u0091\u0092\7c\2\2\u0092\u0093\7p\2\2\u0093\u0094")
        buf.write("\7i\2\2\u0094\u0095\7g\2\2\u0095$\3\2\2\2\u0096\u0097")
        buf.write("\7y\2\2\u0097\u0098\7j\2\2\u0098\u0099\7k\2\2\u0099\u009a")
        buf.write("\7n\2\2\u009a\u009b\7g\2\2\u009b&\3\2\2\2\u009c\u009d")
        buf.write("\7k\2\2\u009d\u009e\7h\2\2\u009e(\3\2\2\2\u009f\u00a0")
        buf.write("\7g\2\2\u00a0\u00a1\7n\2\2\u00a1\u00a2\7u\2\2\u00a2\u00a3")
        buf.write("\7g\2\2\u00a3*\3\2\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6")
        buf.write("\7p\2\2\u00a6\u00a7\7r\2\2\u00a7\u00a8\7w\2\2\u00a8\u00a9")
        buf.write("\7v\2\2\u00a9,\3\2\2\2\u00aa\u00ab\7r\2\2\u00ab\u00ac")
        buf.write("\7t\2\2\u00ac\u00ad\7k\2\2\u00ad\u00ae\7p\2\2\u00ae\u00af")
        buf.write("\7v\2\2\u00af.\3\2\2\2\u00b0\u00b1\7p\2\2\u00b1\u00b2")
        buf.write("\7q\2\2\u00b2\u00b3\7v\2\2\u00b3\60\3\2\2\2\u00b4\u00b5")
        buf.write("\7/\2\2\u00b5\62\3\2\2\2\u00b6\u00b7\7c\2\2\u00b7\u00b8")
        buf.write("\7p\2\2\u00b8\u00b9\7f\2\2\u00b9\64\3\2\2\2\u00ba\u00bb")
        buf.write("\7q\2\2\u00bb\u00bc\7t\2\2\u00bc\66\3\2\2\2\u00bd\u00be")
        buf.write("\7-\2\2\u00be8\3\2\2\2\u00bf\u00c0\7,\2\2\u00c0:\3\2\2")
        buf.write("\2\u00c1\u00c2\7\61\2\2\u00c2<\3\2\2\2\u00c3\u00c4\7?")
        buf.write("\2\2\u00c4\u00c5\7?\2\2\u00c5>\3\2\2\2\u00c6\u00c7\7#")
        buf.write("\2\2\u00c7\u00c8\7?\2\2\u00c8@\3\2\2\2\u00c9\u00ca\7@")
        buf.write("\2\2\u00ca\u00cb\7?\2\2\u00cbB\3\2\2\2\u00cc\u00cd\7>")
        buf.write("\2\2\u00cd\u00ce\7?\2\2\u00ceD\3\2\2\2\u00cf\u00d0\7@")
        buf.write("\2\2\u00d0F\3\2\2\2\u00d1\u00d2\7>\2\2\u00d2H\3\2\2\2")
        buf.write("\u00d3\u00d5\t\2\2\2\u00d4\u00d3\3\2\2\2\u00d5\u00d6\3")
        buf.write("\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00db")
        buf.write("\3\2\2\2\u00d8\u00da\t\3\2\2\u00d9\u00d8\3\2\2\2\u00da")
        buf.write("\u00dd\3\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2")
        buf.write("\u00dcJ\3\2\2\2\u00dd\u00db\3\2\2\2\u00de\u00e0\t\4\2")
        buf.write("\2\u00df\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00df")
        buf.write("\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e9\3\2\2\2\u00e3")
        buf.write("\u00e5\7\60\2\2\u00e4\u00e6\t\4\2\2\u00e5\u00e4\3\2\2")
        buf.write("\2\u00e6\u00e7\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8")
        buf.write("\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00e3\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00eaL\3\2\2\2\u00eb\u00ef\7$\2\2\u00ec")
        buf.write("\u00ee\13\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\u00f1\3\2\2")
        buf.write("\2\u00ef\u00f0\3\2\2\2\u00ef\u00ed\3\2\2\2\u00f0\u00f2")
        buf.write("\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f3\7$\2\2\u00f3")
        buf.write("N\3\2\2\2\u00f4\u00f6\t\5\2\2\u00f5\u00f4\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9\u00fa\b(\2\2\u00faP\3\2\2\2")
        buf.write("\u00fb\u00fc\7\61\2\2\u00fc\u00fd\7\61\2\2\u00fd\u0101")
        buf.write("\3\2\2\2\u00fe\u0100\13\2\2\2\u00ff\u00fe\3\2\2\2\u0100")
        buf.write("\u0103\3\2\2\2\u0101\u0102\3\2\2\2\u0101\u00ff\3\2\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0105\7")
        buf.write("\f\2\2\u0105\u0106\3\2\2\2\u0106\u0107\b)\2\2\u0107R\3")
        buf.write("\2\2\2\13\2\u00d6\u00db\u00e1\u00e7\u00e9\u00ef\u00f7")
        buf.write("\u0101\3\b\2\2")
        return buf.getvalue()


class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    ID = 36
    NUM = 37
    STRING = 38
    WS = 39
    SL_COMMENT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'int'", "'float'", "'boolean'", "'string'", "','", "'='", 
            "'def'", "'('", "')'", "':'", "'}'", "'main'", "'break'", "'for'", 
            "'in'", "'range'", "'while'", "'if'", "'else'", "'input'", "'print'", 
            "'not'", "'-'", "'and'", "'or'", "'+'", "'*'", "'/'", "'=='", 
            "'!='", "'>='", "'<='", "'>'", "'<'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "STRING", "WS", "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "ID", "NUM", "STRING", "WS", 
                  "SL_COMMENT" ]

    grammarFileName = "Python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


